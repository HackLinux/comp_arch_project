library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.params.all;

entity cache_tb is
end cache_tb;

architecture behaviour of cache_tb is

--Declare the component that you are testing:
	component cache is
		port	(	clk				: in  std_logic;
		
					m_writedata		: in  std_logic_vector (word_length-1 downto 0);
					m_address		: in  std_logic_vector(r-1 downto 0);
					m_memwrite		: in  std_logic;
					m_memread		: in  std_logic;
					m_readdata		: out std_logic_vector (word_length-1 downto 0);
					m_waitrequest	: out std_logic;
					
					s_writedata		: out std_logic_vector (word_length-1 downto 0);
					s_address		: out std_logic_vector(r-1 downto 0);
					s_memwrite		: out std_logic;
					s_memread		: out std_logic;
					s_readdata		: in  std_logic_vector (word_length-1 downto 0);
					s_waitrequest	: in  std_logic
				);
	end component cache;

    --all the input signals with initial values
	signal clk				: in  std_logic;
	signal m_writedata	: in  std_logic_vector (word_length-1 downto 0);
	signal m_address		: in  std_logic_vector(r-1 downto 0);
	signal m_memwrite		: in  std_logic;
	signal m_memread		: in  std_logic;
	signal m_readdata		: out std_logic_vector (word_length-1 downto 0);
	signal m_waitrequest	: out std_logic;
	signal s_writedata	: out std_logic_vector (word_length-1 downto 0);
	signal s_address		: out std_logic_vector(r-1 downto 0);
	signal s_memwrite		: out std_logic;
	signal s_memread		: out std_logic;
	signal s_readdata		: in  std_logic_vector (word_length-1 downto 0);
	signal s_waitrequest	: in  std_logic

begin

    --dut => Device Under Test
    xcache: cache port map(clk,m_writedata,m_address,m_memwrite,m_memread,m_readdata,m_waitrequest,s_writedata,s_address,s_memwrite,s_memread,s_readdata,s_waitrequest);

    clk_process : process
    begin
        clk <= '0';
        wait for clock_period/2;
        clk <= '1';
        wait for clock_period/2;
    end process;

    test_process : process
    begin
    	wait for clock_period;
    	address <= 14; 
    	--writedata <= X"12341234";
    	--memwrite <= '1';
    	--wait until is useful to simulate FSM behaviour.
    	--this is NOT synthesizable and should not be used in a hardware design
    	--wait until rising_edge(waitrequest);
    	--memwrite <= '0';
    	--memread <= '1';
	    --wait until rising_edge(waitrequest);
        --assert readdata = x"12341234" report "write unsuccessful" severity error;
    	--memread <= '0';
    	--wait for clock_period;
        --address <= 12;memread <= '1';
        --wait until rising_edge(waitrequest);
        --assert readdata = x"0000000c" report "write unsuccessful" severity error;
        --memread <= '0';
        --wait;

    end process;

 
end;